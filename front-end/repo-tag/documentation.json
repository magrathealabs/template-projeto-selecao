{
    "pipes": [],
    "interfaces": [
        {
            "name": "Login",
            "id": "interface-Login-ccedf9b41d87666c3149f26af7e9c932",
            "file": "src/feature/view-models/login.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\r\n  email: string;\r\n  password: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-80894cdeeb61a7810645f1ff1d7c963d",
            "file": "src/feature/state/user-store.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from '../view-models/user';\n\nexport interface State {\n  userLogged: User;\n}\n\nconst initialState: State = {\n  userLogged: null,\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserStoreService {\n  private subject = new BehaviorSubject<State>(initialState);\n  private store = this.subject.asObservable();\n\n  constructor() { }\n\n  get value() {\n    return this.subject.value;\n  }\n\n  setUserLogged(user: User) {\n    this.subject.next({\n      ...this.value,\n      userLogged: user,\n    });\n  }\n\n  clear() {\n    this.subject.next(initialState);\n  }\n\n  public getUserLogged(): Observable<User> {\n    return this.store.pipe(map((store) => store.userLogged));\n  }\n}\n",
            "properties": [
                {
                    "name": "userLogged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9e25ab4a05f04fdf2d0fd441145cf507",
            "file": "src/feature/view-models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n  email: string;\r\n  hostingPlatformUsername: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "hostingPlatformUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-fdeddb8adbbbe0ed6f1f6636c9bdccd7",
            "file": "src/feature/services/auth.service.ts",
            "properties": [
                {
                    "name": "loggedUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "TOKEN_STORAGE_KEY",
                    "defaultValue": "'token'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "auth",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLoggedUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "storeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserStoreService } from '../state/user-store.service';\nimport { Login } from '../view-models/login';\nimport { User } from '../view-models/user';\nimport { UserApiService } from './user-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  TOKEN_STORAGE_KEY = 'token';\n  loggedUser: User = null;\n\n  constructor(\n    private userApi: UserApiService,\n    private router: Router,\n    private userStore: UserStoreService\n  ) { }\n\n  login(login: Login): void {\n    this.userApi.login(login).subscribe(\n      ({ token, user }) => {\n        this.setLoggedUser(user);\n        this.storeToken(token);\n        this.router.navigate(['/home'])\n      },\n      ({ error, status }) => {\n        if (status === 404 && error.errorMessage) {\n          console.log(error.errorMessage)\n        }\n      }\n    );\n  }\n\n  logout(): void {\n    this.signout();\n  }\n\n  isLogged(): boolean {\n    if (this.token) {\n      if (!this.loggedUser) {\n        return this.auth();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  get token(): string {\n    return localStorage.getItem(this.TOKEN_STORAGE_KEY);\n  }\n\n  signout(): void {\n    this.userStore.clear();\n    this.loggedUser = null;\n    localStorage.removeItem(this.TOKEN_STORAGE_KEY);\n    this.router.navigate(['/login']);\n  }\n\n  private auth() {\n    let error = false;\n    this.userApi.auth().subscribe(\n      (user: User) => this.setLoggedUser(user),\n      () => error = true\n    );\n    return !error;\n  }\n\n  private setLoggedUser(user: User) {\n    this.loggedUser = user;\n    this.userStore.setUserLogged(user);\n  }\n\n  private storeToken(token: string): void {\n    localStorage.setItem(this.TOKEN_STORAGE_KEY, token);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userApi",
                        "type": "UserApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userStore",
                        "type": "UserStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "userApi",
                        "type": "UserApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userStore",
                        "type": "UserStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "string",
                        "returnType": "string",
                        "line": 52
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "UserApiService",
            "id": "injectable-UserApiService-69975d6967968925b9746188ab3a0b8e",
            "file": "src/feature/services/user-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "auth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Login } from '../view-models/login';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { User } from '../view-models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserApiService {\n\n  constructor(private http: HttpClient) { }\n\n  login(login: Login): Observable<{ token: string, user: User }> {\n    return this.http.post<{ token: string, user: User }>(\n      `${environment.apiUrl}/user/login`,\n      login\n    );\n  }\n\n  auth(): Observable<User> {\n    return this.http.get<User>(`${environment.apiUrl}/user/auth`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserStoreService",
            "id": "injectable-UserStoreService-80894cdeeb61a7810645f1ff1d7c963d",
            "file": "src/feature/state/user-store.service.ts",
            "properties": [
                {
                    "name": "store",
                    "defaultValue": "this.subject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<State>(initialState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "setUserLogged",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from '../view-models/user';\n\nexport interface State {\n  userLogged: User;\n}\n\nconst initialState: State = {\n  userLogged: null,\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserStoreService {\n  private subject = new BehaviorSubject<State>(initialState);\n  private store = this.subject.asObservable();\n\n  constructor() { }\n\n  get value() {\n    return this.subject.value;\n  }\n\n  setUserLogged(user: User) {\n    this.subject.next({\n      ...this.value,\n      userLogged: user,\n    });\n  }\n\n  clear() {\n    this.subject.next(initialState);\n  }\n\n  public getUserLogged(): Observable<User> {\n    return this.store.pipe(map((store) => store.userLogged));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "accessors": {
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-60af875e61dea93d9e91d3e1dd120d2b",
            "file": "src/shared/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { AuthService } from 'src/feature/services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      const isLogged = this.authService.isLogged();\n      if (!isLogged) {\n        this.router.navigate(['/login'])\n      }\n      \n      return isLogged;\n  }\n  \n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "LoginGuard",
            "id": "injectable-LoginGuard-31b78d801f7f740ee3c6b236d9c24621",
            "file": "src/feature/guards/login.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n  \n  constructor(private authService: AuthService, private router: Router) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      const isLogged = this.authService.isLogged();\n      if (isLogged) {\n        this.router.navigate(['/home'])\n      }\n      return !isLogged;\n  }\n  \n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-48d5fb34e96abc20740547a05aa65ee2",
            "file": "src/shared/interceptors/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addToken",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleUnauthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport { AuthService } from 'src/feature/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (this.authService.token) {\n      request = this.addToken(request, this.authService.token);\n    }\n    return next.handle(request).pipe(\n      catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          this.handleUnauthorized();\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  private addToken(request: HttpRequest<any>, token: string) {\n    return request.clone({\n      setHeaders: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n  }\n\n  private handleUnauthorized() {\n    this.authService.signout();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-ef9be4dc510a6d5b7ce2b33c276fef00",
            "file": "src/shared/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"error\" | \"success\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss']\n})\nexport class AlertComponent implements OnInit {\n  @Input()\n  message = '';\n\n  @Input()\n  type: 'error' | 'success';\n\n  @Output()\n  onClose = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  get alertClasses() {\n    return [`${this.type}`];\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "alertClasses": {
                    "name": "alertClasses",
                    "getSignature": {
                        "name": "alertClasses",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "templateData": "<div [ngClass]=\"alertClasses\">\n  {{ message }}\n  <span class=\"circle\" (click)=\"onClose.emit()\">\n    <img src=\"assets/icons/close_icon.svg\" alt=\"Close icon\">\n  </span>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-95aa05ad3526654839b71b40e18f9c8d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'repo-tag'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'repo-tag';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- Only when logged -->\n<!-- <app-layout>\n  <router-outlet></router-outlet>\n</app-layout> -->\n\n<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a60469087e50211221eeac13a1b8f563",
            "file": "src/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 16,
                    "type": "ButtonSize"
                },
                {
                    "name": "type",
                    "defaultValue": "'raised'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 22,
                    "type": "ButtonType"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.\n\nValue must be in the format of the CSS property value \"width\".\nExample: 30%",
                    "description": "<p>Optional.</p>\n<p>Value must be in the format of the CSS property value &quot;width&quot;.\nExample: 30%</p>\n",
                    "line": 37,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\ntype ButtonSize = 'default' | 'small';\ntype ButtonType = 'raised' | 'stroked'\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent implements OnInit {\n  /**\n   * Optional.\n   */\n  @Input()\n  size: ButtonSize = 'default'; \n\n  /**\n   * Optional.\n   */\n  @Input()\n  type: ButtonType = 'raised';\n\n  /**\n   * Optional.\n   */\n  @Input()\n  disabled = false;\n\n  /**\n   * Optional.\n   *\n   * Value must be in the format of the CSS property value \"width\".\n   * Example: 30%\n   */\n  @Input()\n  width?: string;\n\n  @Output()\n  onClick = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get buttonClasses() {\n    return [`size-${this.size}`, `type-${this.type}`, this.disabled ? 'disabled' : ''];\n  }\n\n  get buttonStyles() {\n    return {\n      width: this.width\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n  border-radius: 6px;\r\n  transition: all 250ms ease-in;\r\n  &:hover:not(.disabled) {\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.disabled { \r\n  transition: all 250ms ease-out;\r\n}\r\n\r\n.size-default {\r\n  padding: var(--space-small) var(--space);\r\n  .button-text {\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.size-small {\r\n  padding: var(--space-x-small) var(--space-small);\r\n  .button-text {\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n  }\r\n}\r\n\r\n.type-raised {\r\n  background-color: var(--color-main);\r\n  box-shadow: 0 0 18px #0000000a;\r\n  color: var(--color-white);\r\n  border: none;\r\n\r\n  &.disabled {\r\n    background-color: var(--color-main-light);\r\n    color: var(--color-gray);\r\n  }\r\n\r\n  &:active:not(.disabled) {\r\n    box-shadow: 0 0 18px #00000029;\r\n    transition-duration: 10ms;\r\n  }\r\n\r\n  &:hover:not(.disabled) {\r\n    background-color: var(--color-main-dark);\r\n  }\r\n}\r\n\r\n.type-stroked {\r\n  background: none;\r\n  color: var(--color-main);\r\n  border: 1.5px solid var(--color-main);\r\n  \r\n  &.disabled {\r\n    border-color:  var(--color-main-light);\r\n    color: var(--color-gray);\r\n  }\r\n\r\n  &:hover:not(.disabled) {\r\n    border-color: var(--color-main-dark);\r\n    color: var(--color-main-dark);\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                },
                "buttonStyles": {
                    "name": "buttonStyles",
                    "getSignature": {
                        "name": "buttonStyles",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                }
            },
            "templateData": "<button\n  [ngClass]=\"buttonClasses\"\n  [ngStyle]=\"buttonStyles\"\n  [disabled]=\"disabled\"\n  (click)=\"onClick.emit()\"\n>\n  <span class=\"button-text\"><ng-content></ng-content></span>\n</button>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-964bb1a65878e0b00c89f1ec7f178802",
            "file": "src/feature/home/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from 'src/feature/services/auth.service';\nimport { UserStoreService } from 'src/feature/state/user-store.service';\nimport { User } from 'src/feature/view-models/user';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  user$: Observable<User> = null;\n\n  constructor(\n    private userStore: UserStoreService,\n    private authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.user$ = this.userStore.getUserLogged();\n  }\n\n  logout(): void {\n    this.authService.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userStore",
                        "type": "UserStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "userStore",
                        "type": "UserStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 *ngIf=\"user$ | async as user\">Usuário logado: {{ user.name }}</h1>\n<button (click)=\"logout()\">Logout</button>"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-7b74098af78704c5d03048abe1d2e620",
            "file": "src/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: forwardRef(() => InputComponent)\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 38,
                    "type": "\"text\" | \"password\" | \"number\" | \"search\" | \"email\""
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.",
                    "description": "<p>Optional.</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Optional.\n\nValue must be in the format of the CSS property value \"width\".\nExample: 30%",
                    "description": "<p>Optional.</p>\n<p>Value must be in the format of the CSS property value &quot;width&quot;.\nExample: 30%</p>\n",
                    "line": 47,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "onBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "doBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR, multi: true,\n      useExisting: forwardRef(() => InputComponent)\n    }\n  ]\n})\nexport class InputComponent implements OnInit, ControlValueAccessor {\n  /**\n   * Optional.\n   */\n  @Input()\n  label?: string;\n\n  /**\n   * Optional.\n   */\n  @Input()\n  value = '';\n\n  /**\n   * Optional.\n   */\n  @Input()\n  placeholder = '';\n\n  /**\n   * Optional.\n   */\n  @Input()\n  type: 'text' | 'password'| 'number' | 'search' | 'email' = 'text';\n\n  /**\n   * Optional.\n   *\n   * Value must be in the format of the CSS property value \"width\".\n   * Example: 30%\n   */\n  @Input()\n  width?: string;\n\n  control: FormControl = new FormControl('');\n\n  private onChange: (value: string) => void;\n  private onBlur: () => void;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.control = new FormControl(this.value);\n  }\n\n  doInput() {\n    this.onChange(this.control.value);\n  }\n\n  doBlur() {\n    this.onBlur();\n  }\n\n  writeValue(obj: any): void {\n    const value = String(obj);\n    this.control.setValue(value);\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onBlur = fn;\n  }\n  setDisabledState?(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.control.disable();\n    } else {\n      this.control.enable();\n    }\n  }\n\n  get inputStyles() {\n    return {\n      width: this.width\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input, label {\r\n  color: var(--color-black);\r\n}\r\n\r\ninput {\r\n  padding: var(--space-small) var(--space);\r\n  border: 1.5px solid #a5a5a570;\r\n  border-radius: 6px;\r\n  box-sizing: border-box;\r\n  transition: all 100ms ease-in;\r\n\r\n  &:focus-visible {\r\n    outline: none;\r\n    border-color: var(--color-main);\r\n    transition: all 200ms ease-out;\r\n  }\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: var(--space-x-small);\r\n}\r\n\r\n::placeholder {\r\n  color: var(--color-gray);\r\n}\r\n::-webkit-input-placeholder { /* Edge */\r\n  color: var(--color-gray);\r\n}\r\n\r\ninput.success {\r\n  border-color: var(--color-success);\r\n  transition: all 200ms ease-out;\r\n}\r\n\r\ninput.error {\r\n  border-color: var(--color-err);\r\n  transition: all 200ms ease-out;\r\n}",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 52
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "inputStyles": {
                    "name": "inputStyles",
                    "getSignature": {
                        "name": "inputStyles",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                }
            },
            "templateData": "<label *ngIf=\"label\" for=\"input\">{{ label }}</label>\n<input\n  id=\"input\"\n  [type]=\"type\"\n  [placeholder]=\"placeholder\"\n  [formControl]=\"control\"\n  [ngStyle]=\"inputStyles\"\n  (input)=\"doInput()\"\n  (blur)=\"doBlur()\"\n>"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-3f292758cba3fe681c729c2fbdd6405a",
            "file": "src/core/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-7daa27a3656b0dd27ffea688690fe129",
            "file": "src/feature/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRegisterVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/feature/services/auth.service';\nimport { Login } from 'src/feature/view-models/login';\nimport { fadeInAnimation } from 'src/shared/animations/fade-in';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  animations: [fadeInAnimation]\n})\nexport class LoginComponent implements OnInit {\n  registerVisible = false;\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  login(login: Login) {\n    this.authService.login(login);\n  }\n\n  toggleRegisterVisibility() {\n    this.registerVisible = !this.registerVisible\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-container {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 1fr;\r\n  align-content: center;\r\n  column-gap: var(--space-large);\r\n  min-height: 100vh;\r\n}\r\n\r\n.col-1 {\r\n  justify-self: flex-end;\r\n}\r\n.col-2 {\r\n  justify-self: flex-start;\r\n  width: 100%;\r\n  max-width: 31.5em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: var(--space);\r\n\r\n  .register-redirect-container {\r\n    margin-top: var(--space);\r\n    padding: var(--space-x-large);\r\n    border-radius: 6px;\r\n    background-color: var(--bg-form-white);\r\n  }\r\n}\r\n\r\n.col-1, .col-2 {\r\n  align-self: center;\r\n}\r\n\r\napp-login-form::after {\r\n  content: '';\r\n  display: block;\r\n  width: 100%;\r\n  height: 1px;\r\n  background-color: #00000014;\r\n  margin-top: var(--space);\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-container\">\n  <div class=\"col-1\">\n    <img src=\"assets/logo.svg\" alt=\"Logo RepoTags\">\n  </div>\n  <div class=\"col-2\">\n    <div *ngIf=\"!registerVisible\" @fadeIn>\n      <app-login-form\n        (onLogin)=\"login($event)\"\n      ></app-login-form>\n      <section class=\"register-redirect-container\">\n        <app-button\n          type=\"stroked\"\n          width=\"100%\"\n          (onClick)=\"toggleRegisterVisibility($event)\"\n        >\n          Quero me cadastrar\n        </app-button>\n      </section>\n    </div>\n\n    <div *ngIf=\"registerVisible\" @fadeIn>\n      <app-register-form\n        (onClose)=\"toggleRegisterVisibility($event)\"\n      ></app-register-form>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-c72f12bc82810dcb1bcb0f10c7049acd",
            "file": "src/feature/pages/login/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Login>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Login } from '../../../view-models/login';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent implements OnInit {\n  @Output()\n  onLogin = new EventEmitter<Login>();\n\n  loginForm: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      email: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n    })\n  }\n\n  login() {\n    this.onLogin.emit({\n      email: this.loginForm.get('email').value,\n      password: this.loginForm.get('password').value\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-form-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: var(--space-x-large);\r\n  row-gap: var(--space);\r\n  border-radius: 6px;\r\n  background-color: var(--bg-form-white);\r\n}",
                    "styleUrl": "./login-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"loginForm\" class=\"login-form-container\">\n  <app-input\n    label=\"Email\"\n    placeholder=\"Digite seu email\"\n    width=\"100%\"\n    formControlName=\"email\"\n  ></app-input>\n  <app-input\n    label=\"Senha\"\n    placeholder=\"Digite sua senha\"\n    width=\"100%\"\n    type=\"password\"\n    formControlName=\"password\"\n  ></app-input>\n  <app-button\n    width=\"100%\"\n    (onClick)=\"login()\"\n  >\n    Entrar\n  </app-button>\n</form>"
        },
        {
            "name": "RegisterFormComponent",
            "id": "component-RegisterFormComponent-1faca56a583cbd10b10febe0b6377e5b",
            "file": "src/feature/pages/login/register-form/register-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-form",
            "styleUrls": [
                "./register-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "userCreateForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register-form',\n  templateUrl: './register-form.component.html',\n  styleUrls: ['./register-form.component.scss']\n})\nexport class RegisterFormComponent implements OnInit {\n  @Output()\n  onClose = new EventEmitter();\n\n  userCreateForm: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.userCreateForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.required),\n      gitHubUsername: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n      confirmPassword: new FormControl('', Validators.required)\n    })\n  }\n\n  submitForm(): void {\n    console.log(this.userCreateForm.value)\n  }\n\n  close() {\n    this.onClose.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".register-form-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: var(--space);\r\n  row-gap: var(--space);\r\n  border-radius: 6px;\r\n  background-color: var(--bg-form-white);\r\n}\r\n\r\n.register-form {\r\n  padding: var(--space);\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: var(--space);\r\n}\r\n\r\n.close-icon {\r\n  width: 15px;\r\n  height: 15px;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n}",
                    "styleUrl": "./register-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"register-form-container\">\n  <img\n    src=\"assets/icons/close_icon.svg\"\n    alt=\"Close icon\"\n    class=\"close-icon\"\n    (click)=\"close()\"\n  >\n  <form [formGroup]=\"userCreateForm\" class=\"register-form\">\n    <app-input\n      formControlName=\"name\"\n      label=\"Nome completo\"\n      placeholder=\"Digite seu nome completo\"\n      width=\"100%\"\n    ></app-input>\n    <app-input\n      formControlName=\"email\"\n      label=\"Email\"\n      placeholder=\"Digite seu email\"\n      type=\"email\"\n      width=\"100%\"\n    ></app-input>\n    <app-input\n      formControlName=\"gitHubUsername\"\n      label=\"Usuário do GitHub\"\n      placeholder=\"Digite seu usuário do GitHub\"\n      width=\"100%\"\n    ></app-input>\n    <app-input\n      formControlName=\"password\"\n      placeholder=\"Digite sua senha\"\n      label=\"Senha\"\n      type=\"password\"\n      width=\"100%\"\n    ></app-input>\n    <app-input\n      formControlName=\"confirmPassword\"\n      placeholder=\"Confirme sua senha\"\n      label=\"Confirmar senha\"\n      type=\"password\"\n      width=\"100%\"\n    ></app-input>\n    \n    <app-button\n      (onClick)=\"submitForm()\"\n      [disabled]=\"!userCreateForm.valid\"\n      width=\"100%\"\n    >\n      Cadastrar\n    </app-button>\n  </form>\n</section>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-38281bfb061c53619c7b341fb4b27bfe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from 'src/core/core.module';\nimport { FeatureModule } from 'src/feature/feature.module';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { TokenInterceptor } from 'src/shared/interceptors/token.interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    CoreModule,\n    FeatureModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TokenInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FeatureModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-771c4dee79857434938c19b7bb0cdc2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-698f0553aa995e4c5f80ce867ff215bb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LayoutComponent } from './layout/layout.component';\n\n@NgModule({\n  declarations: [LayoutComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [LayoutComponent]\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeatureModule",
            "id": "module-FeatureModule-279cbfebf9752fcb18f71c563ce6c939",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/feature/feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FeatureRoutingModule } from './feature-routing.module';\nimport { SharedModule } from 'src/shared/shared.module';\nimport { LoginComponent } from './pages/login/login.component';\nimport { LoginFormComponent } from './pages/login/login-form/login-form.component';\nimport { RegisterFormComponent } from './pages/login/register-form/register-form.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [LoginComponent, LoginFormComponent, RegisterFormComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FeatureRoutingModule,\n    SharedModule,\n    BrowserAnimationsModule\n  ]\n})\nexport class FeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "RegisterFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FeatureRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeatureRoutingModule",
            "id": "module-FeatureRoutingModule-8923d93e37280712c5c79c75e7b220d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/feature/feature-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginGuard } from './guards/login.guard';\nimport { LoginComponent } from './pages/login/login.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: '/login'\n  },\n  { \n    path: 'home',\n    loadChildren: () => \"import('./home/home.module').then(m => m.HomeModule)\"\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class FeatureRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-0eeda790c6fc654b73d64e49a989035b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/feature/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './pages/home/home.component';\nimport { HomeRoutingModule } from './home-routing.module';\n\n@NgModule({\n  declarations: [HomeComponent],\n  imports: [\n    CommonModule,\n    HomeRoutingModule\n  ]\n})\nexport class HomeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "id": "module-HomeRoutingModule-264b44c17169431f8026caf59c25383c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/feature/home/home-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthGuard } from 'src/shared/guards/auth.guard';\r\nimport { HomeComponent } from './pages/home/home.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n    canActivate: [AuthGuard]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HomeRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-e75d2200253d57954ce3fe55f2335eca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './components/button/button.component';\nimport { InputComponent } from './components/input/input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AlertComponent } from './components/alert/alert.component';\n\n@NgModule({\n  declarations: [ButtonComponent, InputComponent, AlertComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  exports: [ButtonComponent, InputComponent]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Alert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'https://localhost:44324/api'\n}"
            },
            {
                "name": "fadeInAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/animations/fade-in.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fadeIn', [\r\n  transition(':enter', [\r\n    style({ opacity: 0, height: 0 }),\r\n    animate('250ms 100ms ease-in-out', style({ opacity: 1, height: '100%' })),\r\n  ])\r\n])"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/state/user-store.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  userLogged: null,\n}"
            },
            {
                "name": "Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/pages/login/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/pages/login/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/pages/login/register-form/register-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/pages/login/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args) => ({\r\n  component: LoginComponent,\r\n  props: {\r\n    ...args,\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AlertComponent>",
                "defaultValue": "(args) => ({\r\n  component: AlertComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-alert>\r\n        </app-alert>\r\n    </div>\r\n    `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args) => ({\r\n  component: ButtonComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-button>\r\n            Registrar\r\n        </app-button>\r\n    </div>\r\n    `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args) => ({\r\n  component: InputComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-input\r\n          [label]=\"label\"\r\n          [value]=\"value\"\r\n          [placeholder]=\"placeholder\"\r\n          [width]=\"width\"\r\n        >\r\n        </app-input>\r\n    </div>\r\n    `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/pages/login/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginFormComponent>",
                "defaultValue": "(args) => ({\r\n  component: LoginFormComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-login-form>\r\n        </app-login-form>\r\n    </div>\r\n    `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/feature/pages/login/register-form/register-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RegisterFormComponent>",
                "defaultValue": "(args) => ({\r\n  component: RegisterFormComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-register-form>\r\n        </app-register-form>\r\n    </div>\r\n    `,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"small\"",
                "file": "src/shared/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"raised\" | \"stroked\"",
                "file": "src/shared/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/shared/components/alert/alert.stories.ts": [
                {
                    "name": "Alert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AlertComponent>",
                    "defaultValue": "(args) => ({\r\n  component: AlertComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-alert>\r\n        </app-alert>\r\n    </div>\r\n    `,\r\n})"
                }
            ],
            "src/shared/components/button/button.stories.ts": [
                {
                    "name": "Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ButtonComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-button>\r\n            Registrar\r\n        </app-button>\r\n    </div>\r\n    `,\r\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'https://localhost:44324/api'\n}"
                }
            ],
            "src/shared/animations/fade-in.ts": [
                {
                    "name": "fadeInAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/animations/fade-in.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fadeIn', [\r\n  transition(':enter', [\r\n    style({ opacity: 0, height: 0 }),\r\n    animate('250ms 100ms ease-in-out', style({ opacity: 1, height: '100%' })),\r\n  ])\r\n])"
                }
            ],
            "src/feature/state/user-store.service.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/state/user-store.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  userLogged: null,\n}"
                }
            ],
            "src/shared/components/input/input.stories.ts": [
                {
                    "name": "Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args) => ({\r\n  component: InputComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-input\r\n          [label]=\"label\"\r\n          [value]=\"value\"\r\n          [placeholder]=\"placeholder\"\r\n          [width]=\"width\"\r\n        >\r\n        </app-input>\r\n    </div>\r\n    `,\r\n})"
                }
            ],
            "src/feature/pages/login/login.stories.ts": [
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/pages/login/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/pages/login/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args) => ({\r\n  component: LoginComponent,\r\n  props: {\r\n    ...args,\r\n  }\r\n})"
                }
            ],
            "src/feature/pages/login/login-form/login-form.stories.ts": [
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/pages/login/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/pages/login/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginFormComponent>",
                    "defaultValue": "(args) => ({\r\n  component: LoginFormComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-login-form>\r\n        </app-login-form>\r\n    </div>\r\n    `,\r\n})"
                }
            ],
            "src/feature/pages/login/register-form/register-form.stories.ts": [
                {
                    "name": "Register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/pages/login/register-form/register-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/feature/pages/login/register-form/register-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RegisterFormComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RegisterFormComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <div style=\"padding: 1rem\">\r\n        <app-register-form>\r\n        </app-register-form>\r\n    </div>\r\n    `,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/shared/components/button/button.component.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"small\"",
                    "file": "src/shared/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"raised\" | \"stroked\"",
                    "file": "src/shared/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/feature/feature-routing.module.ts",
                "module": "FeatureRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent",
                        "canActivate": [
                            "LoginGuard"
                        ]
                    },
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "/login"
                    },
                    {
                        "path": "home",
                        "loadChildren": "./home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/feature/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/guards/login.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoginGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/feature/home/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/register-form/register-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/register-form/register-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/pages/login/register-form/register-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/feature/services/user-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserApiService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/feature/state/user-store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserStoreService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/feature/state/user-store.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/feature/state/user-store.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/feature/view-models/login.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/feature/view-models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/animations/fade-in.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeInAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "src/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/interceptors/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}